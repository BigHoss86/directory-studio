<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<project name="studio-build" default ="jar" xmlns:ivy="antlib:fr.jayasoft.ivy.ant">
	
	<!-- Setting standard project properties -->
	<property name="src" value="${basedir}/src" />
	<property name="src.main.java" value="${src}/main/java" />
	<property name="src.main.resources" value="${src}/main/resources" />
	<property name="src.test.java" value="${src}/test/java" />
	<property name="src.test.resources" value="${src}/test/resources" />
	<property name="target" value="${basedir}/target" />
	<property name="target.classes" value="${target}/classes" />
	<property name="target.test-classes" value="${target}/test-classes" />
	<property name="target.build" value="${target}/build" />
	<property name="target.doc" value="${target}/doc" />
	<property name="target.html" value="${target}/html" />
	<property name="target.pdf" value="${target}/pdf" />
	<property name="lib.dir" value="${basedir}/lib" />
	
	<!-- Loading specific project, plugin or feature properties -->
	<property file="${basedir}/project.properties" />
	<property file="${basedir}/plugin.properties" />
	<property file="${basedir}/feature.properties" />
	

	<!-- INSTALL-IVY TASK -->
	<target name="install-ivy">
		<!-- Installing Ivy -->
		<path id="ivy.lib.path">
			<fileset dir="../tools" includes="ivy.jar"/>
		</path> 
		<taskdef resource="fr/jayasoft/ivy/ant/antlib.xml" uri="antlib:fr.jayasoft.ivy.ant" classpathref="ivy.lib.path"/> 
		<!-- Configuring Ivy -->
		<property name="repository.dir" location="../dependencies/externals/"/>
		<ivy:configure file="../tools/ivyconf.xml"/>
	</target>

	
	<!-- RETRIEVE-DEPENDENCIES TASK -->
	<target name="retrieve-dependencies" depends="install-ivy" description="Retreive dependencies with ivy">
		<echo>Retrieving dependencies for ${project.name} (${project.id}) version ${project.version}</echo>
		<mkdir dir="${lib.dir}"/>
		<ivy:retrieve/>
	</target>

	
	<!-- BUILD-CLASSPATH TASK -->
	<target name="build-classpath" description="Computes the classpath" >
		<echo>Building classpath for ${project.name} (${project.id}) version ${project.version}</echo>
		<path id="classpath">
			<!-- Project dependencies -->
			<fileset dir="${lib.dir}" />
		</path>
	</target>
	

	<!-- COMPILE TASK -->
	<target name="compile" depends="retrieve-dependencies,build-classpath" description="Compiles the sources">
		<echo>Compiling ${project.name} (${project.id}) version ${project.version}</echo>
		<!-- Compiling main sources -->
		<mkdir dir="${target.classes}"/>
		<javac source="1.5" srcdir="${src.main.java}" destdir="${target.classes}" classpathref="classpath" />
		<copy todir="${target.classes}" failonerror="false">
			<fileset dir="${src.main.resources}" />
		</copy>
		<!-- Compiling test sources -->
		<mkdir dir="${target.test-classes}"/>
		<javac source="1.5" srcdir="${src.test.java}" destdir="${target.test-classes}" classpathref="classpath">
			<classpath>
				<pathelement path="${target.classes}" />
		    </classpath>
		</javac>
		<copy todir="${target.test-classes}" failonerror="false">
			<fileset dir="${src.test.resources}" />
		</copy>
	</target>
	

	<!-- JAR TASK -->
	<target name="jar" depends="compile" description="Creates a Jar from the compiled sources">
		<copy todir="${target.build}" failonerror="false">
			<fileset dir="${target.classes}">
				<include name="**" />
			</fileset>
			<fileset dir="${basedir}">
				<include name="META-INF/**" />
			</fileset>
		</copy>
		<jar destfile="${target}/${project.name}-${project.version}.jar" manifest="${target.build}/META-INF/MANIFEST.MF">
			<fileset dir="${target.build}" />
		</jar>
	</target>
	
	
	<!-- PLUGIN TASK -->
	<target name="plugin" depends="compile" description="Creates a Plugin Jar from the compiled sources">
		<copy todir="${target.build}" failonerror="false">
			<fileset dir="${target.classes}">
				<include name="**" />
			</fileset>
			<fileset dir="${basedir}">
				<include name="about.html" />
				<include name="lib/**" />
				<include name="META-INF/**" />
				<include name="plugin.properties" />
				<include name="plugin.xml" />
				<include name="resources/**" />
			</fileset>
		</copy>
		<jar destfile="${target}/${project.id}_${project.version}.jar" manifest="${target.build}/META-INF/MANIFEST.MF">
			<fileset dir="${target.build}" />
		</jar>
	</target>
	
	
	<!-- FEATURE TASK -->
	<target name="feature" description="Creates a Feature Jar">
		<copy todir="${target.build}" failonerror="false">
			<fileset dir="${basedir}">
				<include name="feature.xml" />
				<include name="feature.properties" />
				<include name="META-INF/**" />
				<include name="studio.png**" />
			</fileset>
		</copy>
		<jar destfile="${target}/${project.id}_${project.version}.jar" manifest="${target.build}/META-INF/MANIFEST.MF">
			<fileset dir="${target.build}" />
		</jar>
	</target>


	<!-- JAVADOC TASK -->
	<target name="javadoc" depends="build-classpath" description="Generate Javadoc files">
		<mkdir dir="${target.doc}" />
		<javadoc destdir="${target.doc}" classpathref="classpath">
			<fileset dir="${src.main.java}" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
		</javadoc>
	</target>

	
	<!-- CLEAN TASK -->
	<target name="clean" description="Deletes any generated file (javadoc, classes, jars, distribution)">
		<echo>Cleaning ${project.name} (${project.id}) version ${project.version}</echo>
		<delete dir="${lib.dir}"/>
		<delete dir="${target}"/>
		<delete dir="${basedir}/docbook-xml"/>
		<delete dir="${basedir}/docbook-xsl"/>
	</target>
	
	
	<!-- HELP-ECLIPSE TASK -->
	<target name="prepare-help" depends="retrieve-dependencies" description="Prepares the help generation">
		<mkdir dir="${basedir}/docbook-xml" />
		<unzip dest="${basedir}/docbook-xml">
			<fileset dir="${basedir}/lib">
				<include name="**/docbook-xml*.zip"/>
			</fileset>
		</unzip>
		<unzip dest="${basedir}">
			<fileset dir="${basedir}/lib">
				<include name="**/docbook-xsl*.zip"/>
			</fileset>
		</unzip>
		<property name="fromregexp" value="^(docbook-xsl-[^/]+)/(.*)" />
		<property name="toregexp" value="docbook-xsl/\2" />
		<move todir="${basedir}">
			<fileset dir="${basedir}">
				<include name="docbook-xsl-*/**"/>
			</fileset>
			<!--<mapper type="regexp" from="${fromregexp}" to="${toregexp}" />-->
			<regexpmapper from="${fromregexp}" to="${toregexp}" handledirsep="true" />
		</move>
		<delete includeemptydirs="true">
			<fileset dir="${basedir}">
				<include name="docbook-xsl-*"/>
			</fileset>
		</delete>
    </target>
	
	
	<!-- HELP-ECLIPSE TASK -->
	<target name="help-eclipse" depends="prepare-help" description="Generates the help for Eclipse">
		<mkdir dir="${target.build}" />
		<xslt in="${src.main.resources}/0_index.xml" out="${target.build}/index.html" style="${basedir}/docbook-xsl/eclipse/eclipse.xsl">
			<classpath location="${lib.dir}/xalan-2.7.0.jar" />
			<param name="ignore.image.scaling" expression="1" />
			<param name="manifest.in.base.dir" expression="0" />
			<param name="base.dir" expression="html/" />
			<param name="html.stylesheet" expression="css/book.css" />
			<param name="table.cell.borders.thickness" expression="1" />
			<!-- <param name="table.borders.with.css" expression="1" /> -->
			<param name="generate.section.toc.level" expression="5" />
			<param name="toc.max.depth" expression="1" />
			<param name="chunk.first.sections" expression="1" />
			<param name="chunk.section.depth" expression="5" />
			<param name="chunk.fast" expression="1" />
			<param name="chunk.separate.lots" expression="1" />
			<!--<param name="chunk.tocs.and.lots" expression="1" />-->
			<param name="ulink.target" expression="_self" />
			<param name="suppress.navigation" expression="1" />
			<param name="html.cleanup" expression="1" />
			<param name="html.cellpadding" expression="3" />
			<param name="use.id.as.filename" expression="1" />
			<param name="chapter.autolabel" expression="0" />
			<param name="section.autolabel" expression="0" />
			<outputproperty name="method" value="xml" />
			<outputproperty name="standalone" value="yes" />
			<outputproperty name="encoding" value="iso8859_1" />
			<outputproperty name="indent" value="es" />
		</xslt>
		<replaceregexp file="${target.build}/toc.xml"
		                         match="&lt;toc [^>]*>"
		                         replace="&lt;toc topic=&#34;html/index.html&#34; label=&#34;${project.name}\&#34;>"
		                         byline="true"/>
		<copy todir="${target.build}" overwrite="true">
			<fileset dir="${basedir}">
				<include name="plugin.xml" />
				<include name="plugin.properties" />
				<include name="about.html" />
			</fileset>
		</copy>
		<mkdir dir="${target.build}/META-INF" />
		<copy todir="${target.build}/META-INF">
			<fileset dir="${basedir}/META-INF">
				<include name="**" />
			</fileset>
		</copy>
		<mkdir dir="${target.build}/about_files" />
		<copy todir="${target.build}/about_files">
			<fileset dir="${basedir}/about_files">
				<include name="**" />
			</fileset>
		</copy>
		<mkdir dir="${target.build}/html" />
		<copy todir="${target.build}/html">
			<fileset dir="${basedir}/resources">
				<include name="**" />
			</fileset>
		</copy>
		<jar destfile="${target}/${project.id}_${project.version}.jar" manifest="${target.build}/META-INF/MANIFEST.MF">
			<fileset dir="${target.build}" />
		</jar>
	</target>

	
	<!-- HELP-HTML TASK -->
	<target name="help-html" depends="prepare-help" description="Generates the help in HTML">
		<mkdir dir="${target.html}" />
		<copy todir="${target.html}">
			<fileset dir="${basedir}/resources">
				<include name="**" />
			</fileset>
		</copy>
		<xslt in="${src.main.resources}/0_index.xml" out="${target.html}/index.html" style="${basedir}/docbook-xsl/html/chunk.xsl">
			<classpath location="lib/xalan-2.7.0.jar" />			
			<param name="ignore.image.scaling" expression="1" />
			<param name="manifest.in.base.dir" expression="0" />
			<!-- <param name="base.dir" expression="html/" /> -->
			<param name="html.stylesheet" expression="css/book.css" />
			<param name="table.cell.borders.thickness" expression="1" />
			<!-- <param name="table.borders.with.css" expression="1" /> -->
			<param name="generate.section.toc.level" expression="5" />
			<param name="toc.max.depth" expression="3" />
			<param name="chunk.first.sections" expression="1" />
			<param name="chunk.section.depth" expression="5" />
			<param name="chunk.fast" expression="1" />
			<param name="chunk.separate.lots" expression="1" />
			<!--<param name="chunk.tocs.and.lots" expression="1" />-->
			<param name="ulink.target" expression="_self" />
			<param name="suppress.navigation" expression="0" />
			<param name="html.cleanup" expression="1" />
			<param name="html.cellpadding" expression="3" />
			<param name="use.id.as.filename" expression="1" />
			<param name="chapter.autolabel" expression="0" />
			<param name="section.autolabel" expression="0" />
			<outputproperty name="method" value="xml" />
			<outputproperty name="standalone" value="yes" />
			<outputproperty name="encoding" value="iso8859_1" />
			<outputproperty name="indent" value="es" />
		</xslt>
	</target>
	

	<!-- HELP-PDF TASK -->
	<target name="help-pdf" depends="prepare-help" description="Generates the help in PDF">
		<property name="fop.dir" value="${lib.dir}"/>
		<taskdef name="fop"
		         classname="org.apache.fop.tools.anttasks.Fop">
		         <classpath>
		            <pathelement location="${fop.dir}/avalon-framework-api-4.2.0.jar"/>
		            <pathelement location="${fop.dir}/avalon-framework-impl-4.2.0.jar"/>
		            <pathelement location="${fop.dir}/commons-logging-1.1.jar"/>
		            <pathelement location="${fop.dir}/commons-io-1.3.1.jar"/>
		            <pathelement location="${fop.dir}/fop-0.9.3.jar"/>
		            <pathelement location="${fop.dir}/batik-all-1.6.jar"/>
		            <pathelement location="${fop.dir}/xmlgraphics-commons-1.1.jar"/>
		         </classpath>
		</taskdef>
		
		<mkdir dir="${target.pdf}" />
		<copy todir="${target.pdf}">
			<fileset dir="${basedir}/resources">
				<include name="**" />
			</fileset>
		</copy>

		<xslt in="${src.main.resources}/0_index.xml" out="${target.pdf}/${project.name}.fo" style="${basedir}/docbook-xsl/fo/docbook.xsl">
			<classpath location="lib/xalan-2.7.0.jar" />			
			<param name="manifest.in.base.dir" expression="0" />
			<param name="generate.section.toc.level" expression="5" />
			<param name="toc.max.depth" expression="3" />
			<param name="ulink.target" expression="_self" />
			<param name="suppress.navigation" expression="0" />
			<param name="use.id.as.filename" expression="1" />
			<param name="chapter.autolabel" expression="I" />
			<param name="section.autolabel" expression="1" />
			<outputproperty name="method" value="xml" />
			<outputproperty name="standalone" value="yes" />
			<outputproperty name="encoding" value="iso8859_1" />
			<outputproperty name="indent" value="es" />
		</xslt>
		<fop format="application/pdf" basedir="${target.pdf}" 
	        fofile="${target.pdf}/${project.name}.fo"
	        outfile="${target.pdf}/${project.name}.pdf" />
	</target>
	
</project>